<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淘七淘八</title>
  <subtitle>陶之家</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="//ataotao.github.io/"/>
  <updated>2017-02-09T01:32:05.153Z</updated>
  <id>//ataotao.github.io/</id>
  
  <author>
    <name>Ataotao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript递归方式完美实现对象、数组深拷贝</title>
    <link href="//ataotao.github.io/2017/02/09/javascript-deepClone/"/>
    <id>//ataotao.github.io/2017/02/09/javascript-deepClone/</id>
    <published>2017-02-09T01:03:12.000Z</published>
    <updated>2017-02-09T01:32:05.153Z</updated>
    
    <content type="html"><![CDATA[<h5 id="对象拷贝方式有很多种，但是如何能够不抛弃对象的constructor，而且相互对象的引用也会完整copy，不受影响，请看下面代码："><a href="#对象拷贝方式有很多种，但是如何能够不抛弃对象的constructor，而且相互对象的引用也会完整copy，不受影响，请看下面代码：" class="headerlink" title="对象拷贝方式有很多种，但是如何能够不抛弃对象的constructor，而且相互对象的引用也会完整copy，不受影响，请看下面代码："></a>对象拷贝方式有很多种，但是如何能够不抛弃对象的<code>constructor</code>，而且相互对象的引用也会完整copy，不受影响，请看下面代码：</h5><p><code>深拷贝</code>：对于深拷贝，针对成员变量存在指针的情况，不仅仅是简单的指针赋值，而是<strong>重新分配内存空间</strong><br><code>浅拷贝</code>：只是拷贝了指针，使得两个指针指向同一个地址</p>
<p>知乎上有一个答案，这个方法可以拷贝对象和数组</p>
<pre><code><figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> cloneObj = <span class="function"><span class="keyword">function</span></span>(obj)&#123;</div><div class="line">    <span class="keyword">var</span> str, <span class="keyword">new</span><span class="type">obj</span> = obj.constructor === <span class="keyword">Array</span> ? [] : <span class="type"></span>&#123;&#125;;</div><div class="line">    <span class="keyword">if</span>(typeof obj !== <span class="string">'object'</span>)&#123;</div><div class="line">        <span class="keyword">return</span>;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(window.JSON)&#123;</div><div class="line">        str = JSON.stringify(obj), <span class="comment">//系列化对象</span></div><div class="line">        <span class="keyword">new</span><span class="type">obj</span> = JSON.parse(str); <span class="comment">//还原</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> obj)&#123;</div><div class="line">            <span class="keyword">new</span><span class="type">obj</span>[i] = typeof obj[i] === <span class="string">'object'</span> ? </div><div class="line">            cloneObj(obj[i]) : <span class="type">obj</span>[i]; </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span><span class="type">obj</span>;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</code></pre><p>但是这个方法<code>遇到环或者是其他类型的数据</code>就咯屁了，自虐一下，放出一个完美方案，虽然某些类型不太可能遇到，采用这方案更加不容易出错</p>
<pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//完美解决方案</span></div><div class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">initialObj, finalObj</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> _deepClone(initialObj, finalObj, &#123;</div><div class="line">    <span class="attr">k</span>: [],</div><div class="line">    <span class="attr">v</span>: []</div><div class="line">    &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">_deepClone</span>(<span class="params">initialObj, finalObj, conflict</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i;</div><div class="line">    <span class="keyword">if</span> (initialObj &amp;&amp; <span class="keyword">typeof</span> initialObj === <span class="string">"object"</span> &amp;&amp; (i = [<span class="built_in">Object</span>, <span class="built_in">Array</span>].indexOf(initialObj.constructor)) != <span class="number">-1</span>) &#123;</div><div class="line">    <span class="keyword">if</span> (!finalObj) &#123;</div><div class="line">        finalObj = initialObj.constructor === <span class="built_in">Array</span> ? [] : &#123;&#125;;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (conflict) &#123;</div><div class="line">        i = conflict.k.indexOf(initialObj);</div><div class="line">        <span class="keyword">if</span> (i != <span class="number">-1</span>) &#123;</div><div class="line">        <span class="keyword">return</span> conflict.v[i];</div><div class="line">        &#125;</div><div class="line">        conflict.k.push(initialObj);</div><div class="line">        conflict.v.push(finalObj);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> initialObj) &#123;</div><div class="line">        finalObj[key] = _deepClone(initialObj[key], finalObj[key], conflict);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> finalObj;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> initialObj;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//测试数据</span></div><div class="line"><span class="keyword">var</span> a = &#123;</div><div class="line">    <span class="string">"n"</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line">a.x = a; <span class="comment">//环引用</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> b = deepClone(a);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(b, b.x === b);  <span class="comment">//查看拷贝对象，x属性为环引用，一直循环</span></div><div class="line"></div><div class="line"><span class="comment">//各种不同类型数据拷贝</span></div><div class="line"><span class="built_in">console</span>.log(deepClone(<span class="number">1</span>));  </div><div class="line"><span class="built_in">console</span>.log(deepClone(<span class="keyword">new</span> <span class="built_in">Date</span>()));  </div><div class="line"><span class="built_in">console</span>.log(deepClone(<span class="regexp">/regex/i</span>));</div><div class="line"><span class="built_in">console</span>.log(deepClone(<span class="literal">false</span>));</div><div class="line"><span class="built_in">console</span>.log(deepClone(<span class="literal">undefined</span>));</div><div class="line"><span class="comment">//测试数据 end</span></div></pre></td></tr></table></figure>
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;对象拷贝方式有很多种，但是如何能够不抛弃对象的constructor，而且相互对象的引用也会完整copy，不受影响，请看下面代码：&quot;&gt;&lt;a href=&quot;#对象拷贝方式有很多种，但是如何能够不抛弃对象的constructor，而且相互对象的引用也会完整copy，不受
    
    </summary>
    
      <category term="Javascript" scheme="//ataotao.github.io/categories/Javascript/"/>
    
    
      <category term="Javascript" scheme="//ataotao.github.io/tags/Javascript/"/>
    
      <category term="深拷贝" scheme="//ataotao.github.io/tags/%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
    
      <category term="js" scheme="//ataotao.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="//ataotao.github.io/2017/02/08/hello-world/"/>
    <id>//ataotao.github.io/2017/02/08/hello-world/</id>
    <published>2017-02-08T06:48:40.000Z</published>
    <updated>2017-02-08T06:48:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新创立了hexo-site"><a href="#新创立了hexo-site" class="headerlink" title="新创立了hexo-site"></a>新创立了hexo-site</h2><!--<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=450 src="//music.163.com/outchain/player?type=0&id=489669263&auto=1&height=430"></iframe>-->
<p><img src="/assets/img/01.jpg" alt=""> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新创立了hexo-site&quot;&gt;&lt;a href=&quot;#新创立了hexo-site&quot; class=&quot;headerlink&quot; title=&quot;新创立了hexo-site&quot;&gt;&lt;/a&gt;新创立了hexo-site&lt;/h2&gt;&lt;!--&lt;iframe frameborder=&quot;no&quot; 
    
    </summary>
    
      <category term="随笔" scheme="//ataotao.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="写作" scheme="//ataotao.github.io/tags/%E5%86%99%E4%BD%9C/"/>
    
  </entry>
  
</feed>
