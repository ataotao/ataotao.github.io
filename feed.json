{"title":"淘七淘八","description":"一些记录","language":"zh-CN","link":"//ataotao.github.io","pubDate":"Thu, 22 Jun 2017 06:11:00 GMT","lastBuildDate":"Sat, 24 Jun 2017 01:41:39 GMT","generator":"hexo-generator-json-feed","webMaster":"Ataotao","items":[{"title":"JavaScript 检测是不是手机浏览器","link":"//ataotao.github.io/2017/06/22/JavaScript 检测是不是手机浏览器/","description":"用正则表达式： 是手机浏览器返回true，不是返回false window.mobilecheck = function() { var check = false; (function(a){if(/(android|bbd+|meego).+mobile|avantgo|bada/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)/|plucker|pocket|psp|series(4|6)0|symbian|treo|up.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera); return check; } 如果要包含平板，代码如下： window.mobileAndTabletcheck = function() { var check = false; (function(a){if(/(android|bbd+|meego).+mobile|avantgo|bada/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)/|plucker|pocket|psp|series(4|6)0|symbian|treo|up.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw-(n|u)|c55/|capi|ccwa|cdm-|cell|chtm|cldc|cmd-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc-s|devi|dica|dmob|do(c|p)o|ds(12|-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(-|_)|g1 u|g560|gene|gf-5|g-mo|go(.w|od)|gr(ad|un)|haie|hcit|hd-(m|p|t)|hei-|hi(pt|ta)|hp( i|ip)|hs-c|ht(c(-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i-(20|go|ma)|i230|iac( |-|/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |/)|klon|kpt |kwc-|kyo(c|k)|le(no|xi)|lg( g|/(k|l|u)|50|54|-[a-w])|libw|lynx|m1-w|m3ga|m50/|ma(te|ui|xo)|mc(01|21|ca)|m-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|-([1-8]|c))|phil|pire|pl(ay|uc)|pn-2|po(ck|rt|se)|prox|psio|pt-g|qa-a|qc(07|12|21|32|60|-[2-7]|i-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55/|sa(ge|ma|mm|ms|ny|va)|sc(01|h-|oo|p-)|sdk/|se(c(-|0|1)|47|mc|nd|ri)|sgh-|shar|sie(-|m)|sk-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h-|v-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl-|tdg-|tel(i|m)|tim-|t-mo|to(pl|sh)|ts(70|m-|m3|m5)|tx-9|up(.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas-|your|zeto|zte-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera); return check; } 原始方法 检测useragent： function detectmob() { if (navigator.userAgent.match(/Android/i) || navigator.userAgent.match(/webOS/i) || navigator.userAgent.match(/iPhone/i) || navigator.userAgent.match(/iPad/i) || navigator.userAgent.match(/iPod/i) || navigator.userAgent.match(/BlackBerry/i) || navigator.userAgent.match(/Windows Phone/i) ) { return true; } else { return false; } }","pubDate":"Thu, 22 Jun 2017 06:11:00 GMT","guid":"//ataotao.github.io/2017/06/22/JavaScript 检测是不是手机浏览器/","category":"Javascript"},{"title":"NodeJs设置环境变量的几种方式","link":"//ataotao.github.io/2017/03/11/NodeJs设置环境变量的几种方式/","description":"方法一： 执行的时候设置1234npm start --production// app.jsconsole.log(process.env.NODE_ENV);production 方法二： package.json文件里面配置1234\"scripts\": &#123; \"start\": \"set NODE_ENV = development &amp;&amp; node ./bin/www\", \"dev\": \"set NODE_ENV = development &amp;&amp; node app\"&#125;,","pubDate":"Sat, 11 Mar 2017 01:24:56 GMT","guid":"//ataotao.github.io/2017/03/11/NodeJs设置环境变量的几种方式/","category":"Nodejs"},{"title":"Math对象技巧，Math.max，Math.min获取数组最大值和Math.random随机数","link":"//ataotao.github.io/2017/03/03/Math对象技巧，Math.max，Math.min获取数组最大值和Math.random随机数/","description":"Math对象技巧，Math.max，Math.min获取数组最大值和Math.random随机数#Math.max，Math.min 求最大值、最小值 //最大值 最小值 var max = Math.max(3, 54, 32, 16); console.log(max); //54 var min = Math.min(3, 54, 32, 16); console.log(min); //3 var values = [1, 2, 3, 4, 5, 6, 7, 8]; var arrMax = Math.max.apply(Math, values); var arrMin = Math.min.apply(Math, values); console.log(arrMax); //8 console.log(arrMin); //1 #Math.ceil Math.floor Math.round舍入方法 // 舍入方法 /* * Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数； * Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数； * Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数（这也是我们在数学课 */ console.log(Math.ceil(25.9)); //26 console.log(Math.ceil(25.5)); //26 console.log(Math.ceil(25.1)); //26 console.log(Math.round(25.9)); //26 console.log(Math.round(25.5)); //26 console.log(Math.round(25.1)); //25 console.log(Math.floor(25.9)); //25 console.log(Math.floor(25.5)); //25 console.log(Math.floor(25.1)); //25 #Math.random()随机数 // 套用下面的公式，就可以利用Math.random()从某个整数范围内随机选择一个值。 //var 值 = Math.floor(Math.random() * 可能值的总数 + 第一个可能的值) //选择一个1到10 之间的数值 var num1 = Math.floor(Math.random() * 10 + 1); // 选择一个介于2 到10 之间的值 var num2 = Math.floor(Math.random() * 9 + 2); // 整合方法 function selectFrom(lowerValue, upperValue) { var choices = upperValue - lowerValue + 1; return Math.floor(Math.random() * choices + lowerValue); } var num = selectFrom(2, 10); console.log(num); // 介于 2 和10 之间（包括 2 和 10）的一个数值 #Math.random()应用 // 函数selectFrom()接受两个参数：应该返回的最小值和最大值。而用最大值减最小值再加1 得到了可能值的总数，然后它又把这些数值套用到了前面的公式中。 // 这样，通过调用selectFrom(2,10)就可以得到一个介于2 和10 之间（包括2 和10）的数值了。 // 利用这个函数，可以方便地从数组中随机取出一项 var colors = [&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;purple&quot;, &quot;brown&quot;]; var color = colors[selectFrom(0, colors.length - 1)]; console.log(color); // 可能是数组中包含的任何一个字符串","pubDate":"Fri, 03 Mar 2017 01:39:00 GMT","guid":"//ataotao.github.io/2017/03/03/Math对象技巧，Math.max，Math.min获取数组最大值和Math.random随机数/","category":"Javascript"},{"title":"一些常用的git命令","link":"//ataotao.github.io/2017/02/28/一些常用的git命令/","description":"查看所有分支的详细日志git log --all --decorate --graph 它用线段表示分支的合并情况，还能看到标签： * commit ca0fd229e12d51a6429e6a91a094063bbc00ea56 (HEAD -&gt; master, origin/master, origin/HEAD) | Author: Geoffrey Booth &lt;webmaster@geoffreybooth.com&gt; | Date: Wed Feb 22 10:53:09 2017 -0800 | | Update v2 NPM installation instructions | * commit a9bd53d77f075953170a820615b627ddeeb85ed0 |\\ Merge: 91e3f72 f8ce1a8 | | Author: Jeremy Ashkenas &lt;jashkenas@gmail.com&gt; | | Date: Wed Feb 22 13:16:44 2017 -0500 | | | | Merge pull request #4448 from GeoffreyBooth/2-docs-on-master | | | | 2 docs on master | | | * commit f8ce1a8183f53a13c5bd14039654e0860c617dbd | | Author: Geoffrey &lt;webmaster@geoffreybooth.com&gt; | | Date: Tue Feb 21 20:58:31 2017 -0800 | | | | Teaser for CoffeeScript 2, link to 2 docs | | | * commit cee1076e1d459b9aeeca735a2817410ef0a28bf0 |/ Author: Geoffrey Booth &lt;webmaster@geoffreybooth.com&gt; 恢复一个文件git checkout &lt;file-path&gt; 清除工作目录中所有更改git reset --hard &amp;&amp; git clean -df 完全恢复工作目录git reset --hard &amp;&amp; git clean -dfx 它会使工作目录恢复成“全新”状态，即：刚clone之后的状态。 注意，它会清除所有的 ignored files。 （优雅地）回滚到原来的git revert -n &lt;commit&gt;..HEAD 然后再commit即可。 这和 git reset 以及rebase都不同，它不修改历史（不删除原来的commit），而是用新的commit来抵消。这是很好的方式，大多数情况下都最好用revert来撤销。 姑且把它称之为“软回滚”吧。 （强硬地）回滚到原来的git reset --hard &lt;commit&gt; 它会把HEAD指向这个commit，所以相当于把之后的commit全“删”了（不过并没真正删除，只有在定期的垃圾回收时刻才真正删除）。 不建议这样做。历史应该尽量保留，除非里面有敏感信息。 删除早期的commit以节省（远程或本地）空间git rebase -i --root 几年以前的commits，你可能想把它们都删除了（不建议，但是如果有个大文件在里面占据了很大容量，而现在没有这个文件了，那这些commits就是个包袱）。这个方法不但会删掉commits，还会改变之后所有commits的hash值，所以请慎用！ 运行后，会出来一编辑器，列出从第一个commit开始的所有commits，你只要把pick改成s，这个commit就会被“挤”掉（合并到上一个commit中）。我们举个例子，当运行此命令后，出现： pick bbb2b0b initpick 8ec6fb8 aaapick a1d84fc bbbpick b36a6da ccc你想删除第二个和第三个commit（也就是把它们都合并到第一个commit中），那就改成这样（千万不可直接删除行，否则可能会导致丢失不想删除的文件）： pick bbb2b0b inits 8ec6fb8 aaas a1d84fc bbbpick b36a6da ccc保存退出后，在最后还会出现一编辑器，是用来输入这个合并后的 commit message 的。 不过这还无法立即释放本地空间，如果要立即释放，要把所有东西从reflog里删除： git reflog expire --all --expire=now 然后再清理： git gc --prune=all 清空reflog和清理的步骤可以不做，push的时候远程仓库会自动删除这些已被删除的commit，然后别人clone或pull的时候也就不会下载这些多余文件了。 push的时候要这样： push -f 否则远程计算机会拒绝。因为我们已经修改或删除了已被push的commit，所以必须强制，才能让远程计算机也修改或删除这些commit。 列出变动的文件，但不包括详细内容git diff --name-status git diff --name-status &lt;commit&gt; &lt;commit&gt; 当变化很大，详细内容有无数行的时候，就很好用。 显示某个commit中某个文件的内容git show &lt;commit&gt;:&lt;path&gt; 例如 git show f6f207a:README.txt。 显示某个commit的更改git show &lt;commit&gt; git show --name-status &lt;commit&gt; 和diff非常相似，但命令更简洁些。 打包备份git bundle create &lt;backup-file-path&gt; --all 例如： git bundle create /backups/project1.bundle --all Git就会在/backups目录下生成project1.bundle文件，里面包含着.git目录下的一切被引用的对象，包括所有commit、标签、分支。这个文件是压缩的，非常小。你可以定期备份，当要还原的时候，只要clone即可： git clone /backups/project1.bundle project1 （完） 原文链接：https://zhanzhenzhen.github.io/2017_02_26/ 在github上建立gh-pages分支 为什么要建立gh-pages分支呢，因为github项目的静态页面解析需要这个名字的分支 //进入到你想要上传的文件夹下： cd text //git初始化 git init //创建gh-pages分支 git checkout –orphan gh-pages //添加文件到暂存区 git add . //添加信息 git commit -m “This is add message” //或者不写上面的git add .直接写 git commit -a -m \\”First pages commit\\”这个-a参数我查了之后说是对git add .的替代，但我不建议大家使用。 //添加仓库 git remote add origin git@github.com:username/project.git //部署你的项目到github git push origin gh-pages git命令//查看分支 git branch git branch -a //本地分支 git branch -r //远程分支 //建立分支 git branch 分支名 //切换分支 git checkout 分支名 //拉取 git pull git pull origin gh-pages git pull origin master //提交 git commit -m &quot;This is add message&quot; //推送 git push origin gh-pages git push origin master //add 全部 git add -A //git add . ：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。 //git add -u ：他仅监控已经被add的文件（即tracked file），他会将被修改的文件提交到暂存区。add -u 不会提交新文件（untracked file）。（git add --update的缩写） //git add -A ：是上面两个功能的合集（git add --all的缩写） //本地的同步成远程的文件 git reset --hard origin //恢复某个文件 git checkout xxx.js","pubDate":"Tue, 28 Feb 2017 01:09:24 GMT","guid":"//ataotao.github.io/2017/02/28/一些常用的git命令/","category":"git"},{"title":"Javascript递归方式完美实现对象、数组深拷贝","link":"//ataotao.github.io/2017/02/09/javascript-deepClone/","description":"对象拷贝方式有很多种，但是如何能够不抛弃对象的constructor，而且相互对象的引用也会完整copy，不受影响，请看下面代码：深拷贝：对于深拷贝，针对成员变量存在指针的情况，不仅仅是简单的指针赋值，而是重新分配内存空间浅拷贝：只是拷贝了指针，使得两个指针指向同一个地址 知乎上有一个答案，这个方法可以拷贝对象和数组 123456789101112131415var cloneObj = function(obj)&#123; var str, newobj = obj.constructor === Array ? [] : &#123;&#125;; if(typeof obj !== 'object')&#123; return; &#125; else if(window.JSON)&#123; str = JSON.stringify(obj), //系列化对象 newobj = JSON.parse(str); //还原 &#125; else &#123; for(var i in obj)&#123; newobj[i] = typeof obj[i] === 'object' ? cloneObj(obj[i]) : obj[i]; &#125; &#125; return newobj;&#125;; 这个方法遇到环或者是其他类型的数据就咯屁了，网上大部分深克隆的答案都没考虑循环引用问题以及不能toJSON的对象问题。自虐一下，放出一个完美方案，虽然某些类型不太可能遇到，采用这方案更加不容易出错 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849//完美解决方案var http = require('http');function deepClone(initialObj, finalObj) &#123; return _deepClone(initialObj, finalObj, &#123; k: [], v: [] &#125;);&#125;function _deepClone(initialObj, finalObj, conflict) &#123; var i; if (initialObj &amp;&amp; typeof initialObj === \"object\" &amp;&amp; (i = [Object, Array].indexOf(initialObj.constructor)) != -1) &#123; if (!finalObj) &#123; finalObj = initialObj.constructor === Array ? [] : &#123;&#125;; &#125; if (conflict) &#123; i = conflict.k.indexOf(initialObj); if (i != -1) &#123; return conflict.v[i]; &#125; conflict.k.push(initialObj); conflict.v.push(finalObj); &#125; for (var key in initialObj) &#123; finalObj[key] = _deepClone(initialObj[key], finalObj[key], conflict); &#125; return finalObj; &#125; return initialObj;&#125;//测试数据var a = &#123; \"n\": 1&#125;;a.x = a; //环引用var b = deepClone(a);console.log(b, b.x === b); //查看拷贝对象，x属性为环引用，一直循环//各种不同类型数据拷贝console.log(deepClone(1)); console.log(deepClone(new Date())); console.log(deepClone(/regex/i));console.log(deepClone(false));console.log(deepClone(undefined));//测试数据 end","pubDate":"Thu, 09 Feb 2017 01:03:12 GMT","guid":"//ataotao.github.io/2017/02/09/javascript-deepClone/","category":"Javascript"},{"title":"Hello World","link":"//ataotao.github.io/2017/02/08/hello-world/","description":"新创立了hexo-site","pubDate":"Wed, 08 Feb 2017 06:48:40 GMT","guid":"//ataotao.github.io/2017/02/08/hello-world/","category":"随笔"}]}